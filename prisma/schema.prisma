generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id                Int                @id @default(autoincrement())
    name              String
    email             String             @unique
    password          String
    address           String?
    role              UserRole           @default(USER)
    cart              Cart?
    orders            Order[]
    verificationToken VerificationToken?
    verified          DateTime?
    // Change to array of providers 'cause we can have multiple providers
    provider          String?
    providerId        String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id         Int        @id @default(autoincrement())
    user       User?      @relation(fields: [userId], references: [id])
    userId     Int?       @unique
    token      String
    items      CartItem[]
    totalPrice Float      @default(0)
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
}

model CartItem {
    id                  Int             @id @default(autoincrement())
    cart                Cart            @relation(fields: [cartId], references: [id])
    cartId              Int
    product             Product?        @relation(fields: [productId], references: [id])
    productId           Int?
    productVariant      ProductVariant? @relation(fields: [productVariantId], references: [id])
    productVariantId    Int?
    quantity            Int             @default(1)
    additionIngredients Ingredient[]
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @updatedAt
}

model Category {
    id        Int       @id @default(autoincrement())
    name      String    @unique
    products  Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Product {
    id          Int              @id @default(autoincrement())
    name        String
    variants    ProductVariant[]
    category    Category         @relation(fields: [categoryId], references: [id])
    categoryId  Int
    ingredients Ingredient[]
    cartItems   CartItem[]
    price       Float?
    imageUrl    String?
    description String?
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
}

model ProductVariant {
    id        Int        @id @default(autoincrement())
    price     Float
    size      Size?
    type      String?
    imageUrl  String
    isDefault Boolean    @default(false)
    product   Product    @relation(fields: [productId], references: [id])
    productId Int
    cartItems CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model Ingredient {
    id        Int        @id @default(autoincrement())
    name      String
    price     Float?
    imageUrl  String?
    products  Product[]
    cartItems CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model Order {
    id         Int         @id @default(autoincrement())
    user       User?       @relation(fields: [userId], references: [id])
    userId     Int?
    token      String
    totalPrice Float
    status     OrderStatus @default(PENDING)
    paymentId  String?
    items      Json
    name       String
    email      String
    address    String
    phone      String
    comment    String?
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
}

model VerificationToken {
    id        Int      @id @default(autoincrement())
    token     String
    expires   DateTime
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @unique
    createdAt DateTime @default(now())

    @@unique([token, userId])
}

enum OrderStatus {
    PENDING
    CONFIRMED
    DELIVERED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}

enum Size {
    s
    m
    l
}
